TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: x
TOKEN: INTCONST  LEXEME: 5
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding x to symbol table
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y
TOKEN: INTCONST  LEXEME: 7
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding y to symbol table
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: z
TOKEN: INTCONST  LEXEME: 3
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding z to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print
TOKEN: IDENT     LEXEME: z
EXPR -> ID
PRINT_EXPR -> print EXPR
3
PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: IF        LEXEME: if
TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -
OP -> -
TOKEN: IDENT     LEXEME: x
EXPR -> ID
TOKEN: INTCONST  LEXEME: 5
EXPR -> INTCONST
ARITHMETIC_EXPR -> OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHMETIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: INTCONST  LEXEME: 1
EXPR -> INTCONST
TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print
TOKEN: IDENT     LEXEME: y
EXPR -> ID
PRINT_EXPR -> print EXPR
7
PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
IF_EXPR -> if EXPR EXPR EXPR
PARENTHESIZED_EXPR -> IF_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR

---- Completed parsing ----


Value of the expression is: 7
