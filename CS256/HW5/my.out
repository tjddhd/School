TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: x
TOKEN: INTCONST  LEXEME: 100
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding x to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y
TOKEN: INTCONST  LEXEME: 20
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding y to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: z
TOKEN: INTCONST  LEXEME: 10
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding z to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: w
TOKEN: INTCONST  LEXEME: 5
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding w to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: LET       LEXEME: let

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: t
TOKEN: INTCONST  LEXEME: 4
EXPR -> INTCONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( ID EXPR )
___Adding t to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: MULT      LEXEME: *
OP -> *
TOKEN: IDENT     LEXEME: x
EXPR -> ID
TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -
OP -> -
TOKEN: IDENT     LEXEME: w
EXPR -> ID
TOKEN: LPAREN    LEXEME: (
TOKEN: DIV       LEXEME: /
OP -> /
TOKEN: LPAREN    LEXEME: (
TOKEN: ADD       LEXEME: +
OP -> +
TOKEN: IDENT     LEXEME: z
EXPR -> ID
TOKEN: IDENT     LEXEME: t
EXPR -> ID
ARITHMETIC_EXPR -> OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHMETIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: y
EXPR -> ID
ARITHMETIC_EXPR -> OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHMETIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHMETIC_EXPR -> OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHMETIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHMETIC_EXPR -> OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHMETIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR

---- Completed parsing ----


Value of the expression is: 500
